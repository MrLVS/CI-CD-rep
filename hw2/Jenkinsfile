pipeline {
    agent {
        label 'docker'
    }

    environment {
        IMAGE_REPO = 'mrlvs/java'
        TAG = "1.0.0"
    }

    stages {
        stage("Build") {
            steps {
                sh '''
                printenv
                pwd
                ls -la
                cd hw2/
                pwd
                ls -la
                docker build -t $IMAGE_REPO:$TAG-$JOB_NAME-$BUILD_NUMBER -t $IMAGE_REPO:latest ./
                '''
                withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v1/') {
                    sh '''
                    docker push $IMAGE_REPO:$TAG-$JOB_NAME-$BUILD_NUMBER
                    docker push $IMAGE_REPO:latest
                    '''
                }  
            }
        }

        stage("Tests") {
                when { 
                    not {
                        environment name: 'GIT_BRANCH', value: 'origin/master'}
                }
                parallel {
                stage("Unit Tests") {
                    agent {
                        docker {
                            image 'maven:3-alpine'
                            label 'docker'
                        }
                    }
                    steps {
                        sh 'pwd'
                        sh 'ls -la'
                        sh 'mvn -f ./'
                    }
                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [junitParser(pattern: '**/test-results.xml')]
                            )
                        }
                    }
                }

                stage("Security Scanning") {
                    agent {
                        docker {
                            image 'aquasec/trivy'
                            label 'docker'
                            args '--entrypoint='
                        }
                    }
                    steps {
                        sh 'trivy --cache-dir .trivycache/ -f json -o trivy.json $IMAGE_REPO:$TAG'
                    }
                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [trivy(pattern: '**/trivy.json')]
                            )
                        }
                    }
                }
            }
        }

        stage("Deploy"){
            agent{
                docker {
                    image 'alpine/helm'
                    label 'docker'
                    args '--entrypoint='
                }
            }
            input {
                message 'What a Namespace?'
                 parameters {
                    choice choices: ['lukin', 'default', 'yaroshenko', 'filatov', 'maloglazov'], name: 'NAMESPACE'
                 }
            }

            steps{
                withCredentials([kubeconfigFile(credentialsId: 'kubeconf', variable: 'KUBECONFIG')]) {
                    sh 'helm -n $NAMESPACE install chart1 hell-m-chart/'
                }
            }
        }
    }
       
}